// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	model "github.com/sbot/proto/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SbotServiceClient is the client API for SbotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SbotServiceClient interface {
	QueryAttackTasks(ctx context.Context, in *model.AttackTaskQuery, opts ...grpc.CallOption) (*model.AttackTaskReply, error)
	QueryAttackedNodes(ctx context.Context, in *model.AttackedNodeQuery, opts ...grpc.CallOption) (*model.AttackedNodeReply, error)
	QueryAttackProcess(ctx context.Context, in *model.AttackProcessQuery, opts ...grpc.CallOption) (*model.AttackProcessMessageReply, error)
	QueryAttackedDownloadFiles(ctx context.Context, in *model.AttackedNodeDownloadFileQuery, opts ...grpc.CallOption) (*model.AttackedNodeDownloadFileReply, error)
}

type sbotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSbotServiceClient(cc grpc.ClientConnInterface) SbotServiceClient {
	return &sbotServiceClient{cc}
}

func (c *sbotServiceClient) QueryAttackTasks(ctx context.Context, in *model.AttackTaskQuery, opts ...grpc.CallOption) (*model.AttackTaskReply, error) {
	out := new(model.AttackTaskReply)
	err := c.cc.Invoke(ctx, "/sbot.proto.service.SbotService/QueryAttackTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sbotServiceClient) QueryAttackedNodes(ctx context.Context, in *model.AttackedNodeQuery, opts ...grpc.CallOption) (*model.AttackedNodeReply, error) {
	out := new(model.AttackedNodeReply)
	err := c.cc.Invoke(ctx, "/sbot.proto.service.SbotService/QueryAttackedNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sbotServiceClient) QueryAttackProcess(ctx context.Context, in *model.AttackProcessQuery, opts ...grpc.CallOption) (*model.AttackProcessMessageReply, error) {
	out := new(model.AttackProcessMessageReply)
	err := c.cc.Invoke(ctx, "/sbot.proto.service.SbotService/QueryAttackProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sbotServiceClient) QueryAttackedDownloadFiles(ctx context.Context, in *model.AttackedNodeDownloadFileQuery, opts ...grpc.CallOption) (*model.AttackedNodeDownloadFileReply, error) {
	out := new(model.AttackedNodeDownloadFileReply)
	err := c.cc.Invoke(ctx, "/sbot.proto.service.SbotService/QueryAttackedDownloadFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SbotServiceServer is the server API for SbotService service.
// All implementations must embed UnimplementedSbotServiceServer
// for forward compatibility
type SbotServiceServer interface {
	QueryAttackTasks(context.Context, *model.AttackTaskQuery) (*model.AttackTaskReply, error)
	QueryAttackedNodes(context.Context, *model.AttackedNodeQuery) (*model.AttackedNodeReply, error)
	QueryAttackProcess(context.Context, *model.AttackProcessQuery) (*model.AttackProcessMessageReply, error)
	QueryAttackedDownloadFiles(context.Context, *model.AttackedNodeDownloadFileQuery) (*model.AttackedNodeDownloadFileReply, error)
	mustEmbedUnimplementedSbotServiceServer()
}

// UnimplementedSbotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSbotServiceServer struct {
}

func (UnimplementedSbotServiceServer) QueryAttackTasks(context.Context, *model.AttackTaskQuery) (*model.AttackTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAttackTasks not implemented")
}
func (UnimplementedSbotServiceServer) QueryAttackedNodes(context.Context, *model.AttackedNodeQuery) (*model.AttackedNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAttackedNodes not implemented")
}
func (UnimplementedSbotServiceServer) QueryAttackProcess(context.Context, *model.AttackProcessQuery) (*model.AttackProcessMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAttackProcess not implemented")
}
func (UnimplementedSbotServiceServer) QueryAttackedDownloadFiles(context.Context, *model.AttackedNodeDownloadFileQuery) (*model.AttackedNodeDownloadFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAttackedDownloadFiles not implemented")
}
func (UnimplementedSbotServiceServer) mustEmbedUnimplementedSbotServiceServer() {}

// UnsafeSbotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SbotServiceServer will
// result in compilation errors.
type UnsafeSbotServiceServer interface {
	mustEmbedUnimplementedSbotServiceServer()
}

func RegisterSbotServiceServer(s grpc.ServiceRegistrar, srv SbotServiceServer) {
	s.RegisterService(&SbotService_ServiceDesc, srv)
}

func _SbotService_QueryAttackTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AttackTaskQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SbotServiceServer).QueryAttackTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sbot.proto.service.SbotService/QueryAttackTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SbotServiceServer).QueryAttackTasks(ctx, req.(*model.AttackTaskQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _SbotService_QueryAttackedNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AttackedNodeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SbotServiceServer).QueryAttackedNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sbot.proto.service.SbotService/QueryAttackedNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SbotServiceServer).QueryAttackedNodes(ctx, req.(*model.AttackedNodeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _SbotService_QueryAttackProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AttackProcessQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SbotServiceServer).QueryAttackProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sbot.proto.service.SbotService/QueryAttackProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SbotServiceServer).QueryAttackProcess(ctx, req.(*model.AttackProcessQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _SbotService_QueryAttackedDownloadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AttackedNodeDownloadFileQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SbotServiceServer).QueryAttackedDownloadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sbot.proto.service.SbotService/QueryAttackedDownloadFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SbotServiceServer).QueryAttackedDownloadFiles(ctx, req.(*model.AttackedNodeDownloadFileQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// SbotService_ServiceDesc is the grpc.ServiceDesc for SbotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SbotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sbot.proto.service.SbotService",
	HandlerType: (*SbotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryAttackTasks",
			Handler:    _SbotService_QueryAttackTasks_Handler,
		},
		{
			MethodName: "QueryAttackedNodes",
			Handler:    _SbotService_QueryAttackedNodes_Handler,
		},
		{
			MethodName: "QueryAttackProcess",
			Handler:    _SbotService_QueryAttackProcess_Handler,
		},
		{
			MethodName: "QueryAttackedDownloadFiles",
			Handler:    _SbotService_QueryAttackedDownloadFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/sbot_service.proto",
}
