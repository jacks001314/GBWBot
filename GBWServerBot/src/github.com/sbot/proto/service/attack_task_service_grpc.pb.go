// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	model "github.com/sbot/proto/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AttackTaskServiceClient is the client API for AttackTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttackTaskServiceClient interface {
	CreateAttackTask(ctx context.Context, in *model.CreateAttackTaskRequest, opts ...grpc.CallOption) (*model.CreateAttackTaskReply, error)
}

type attackTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttackTaskServiceClient(cc grpc.ClientConnInterface) AttackTaskServiceClient {
	return &attackTaskServiceClient{cc}
}

func (c *attackTaskServiceClient) CreateAttackTask(ctx context.Context, in *model.CreateAttackTaskRequest, opts ...grpc.CallOption) (*model.CreateAttackTaskReply, error) {
	out := new(model.CreateAttackTaskReply)
	err := c.cc.Invoke(ctx, "/sbot.proto.service.AttackTaskService/CreateAttackTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttackTaskServiceServer is the server API for AttackTaskService service.
// All implementations must embed UnimplementedAttackTaskServiceServer
// for forward compatibility
type AttackTaskServiceServer interface {
	CreateAttackTask(context.Context, *model.CreateAttackTaskRequest) (*model.CreateAttackTaskReply, error)
	mustEmbedUnimplementedAttackTaskServiceServer()
}

// UnimplementedAttackTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAttackTaskServiceServer struct {
}

func (UnimplementedAttackTaskServiceServer) CreateAttackTask(context.Context, *model.CreateAttackTaskRequest) (*model.CreateAttackTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttackTask not implemented")
}
func (UnimplementedAttackTaskServiceServer) mustEmbedUnimplementedAttackTaskServiceServer() {}

// UnsafeAttackTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttackTaskServiceServer will
// result in compilation errors.
type UnsafeAttackTaskServiceServer interface {
	mustEmbedUnimplementedAttackTaskServiceServer()
}

func RegisterAttackTaskServiceServer(s grpc.ServiceRegistrar, srv AttackTaskServiceServer) {
	s.RegisterService(&AttackTaskService_ServiceDesc, srv)
}

func _AttackTaskService_CreateAttackTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CreateAttackTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttackTaskServiceServer).CreateAttackTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sbot.proto.service.AttackTaskService/CreateAttackTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttackTaskServiceServer).CreateAttackTask(ctx, req.(*model.CreateAttackTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttackTaskService_ServiceDesc is the grpc.ServiceDesc for AttackTaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttackTaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sbot.proto.service.AttackTaskService",
	HandlerType: (*AttackTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAttackTask",
			Handler:    _AttackTaskService_CreateAttackTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/attack_task_service.proto",
}
