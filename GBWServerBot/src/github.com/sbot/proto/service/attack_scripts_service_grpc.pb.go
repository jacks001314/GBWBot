// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	model "github.com/sbot/proto/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AttackScriptsServiceClient is the client API for AttackScriptsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttackScriptsServiceClient interface {
	AddAttackScripts(ctx context.Context, in *model.AddAttackScriptsRequest, opts ...grpc.CallOption) (*model.AddAttackScriptsReply, error)
	FetchAttackScripts(ctx context.Context, in *model.FetchAttackScriptsRequest, opts ...grpc.CallOption) (AttackScriptsService_FetchAttackScriptsClient, error)
}

type attackScriptsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttackScriptsServiceClient(cc grpc.ClientConnInterface) AttackScriptsServiceClient {
	return &attackScriptsServiceClient{cc}
}

func (c *attackScriptsServiceClient) AddAttackScripts(ctx context.Context, in *model.AddAttackScriptsRequest, opts ...grpc.CallOption) (*model.AddAttackScriptsReply, error) {
	out := new(model.AddAttackScriptsReply)
	err := c.cc.Invoke(ctx, "/sbot.proto.service.AttackScriptsService/AddAttackScripts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attackScriptsServiceClient) FetchAttackScripts(ctx context.Context, in *model.FetchAttackScriptsRequest, opts ...grpc.CallOption) (AttackScriptsService_FetchAttackScriptsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AttackScriptsService_ServiceDesc.Streams[0], "/sbot.proto.service.AttackScriptsService/FetchAttackScripts", opts...)
	if err != nil {
		return nil, err
	}
	x := &attackScriptsServiceFetchAttackScriptsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AttackScriptsService_FetchAttackScriptsClient interface {
	Recv() (*model.AttackScripts, error)
	grpc.ClientStream
}

type attackScriptsServiceFetchAttackScriptsClient struct {
	grpc.ClientStream
}

func (x *attackScriptsServiceFetchAttackScriptsClient) Recv() (*model.AttackScripts, error) {
	m := new(model.AttackScripts)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AttackScriptsServiceServer is the server API for AttackScriptsService service.
// All implementations must embed UnimplementedAttackScriptsServiceServer
// for forward compatibility
type AttackScriptsServiceServer interface {
	AddAttackScripts(context.Context, *model.AddAttackScriptsRequest) (*model.AddAttackScriptsReply, error)
	FetchAttackScripts(*model.FetchAttackScriptsRequest, AttackScriptsService_FetchAttackScriptsServer) error
	mustEmbedUnimplementedAttackScriptsServiceServer()
}

// UnimplementedAttackScriptsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAttackScriptsServiceServer struct {
}

func (UnimplementedAttackScriptsServiceServer) AddAttackScripts(context.Context, *model.AddAttackScriptsRequest) (*model.AddAttackScriptsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAttackScripts not implemented")
}
func (UnimplementedAttackScriptsServiceServer) FetchAttackScripts(*model.FetchAttackScriptsRequest, AttackScriptsService_FetchAttackScriptsServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchAttackScripts not implemented")
}
func (UnimplementedAttackScriptsServiceServer) mustEmbedUnimplementedAttackScriptsServiceServer() {}

// UnsafeAttackScriptsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttackScriptsServiceServer will
// result in compilation errors.
type UnsafeAttackScriptsServiceServer interface {
	mustEmbedUnimplementedAttackScriptsServiceServer()
}

func RegisterAttackScriptsServiceServer(s grpc.ServiceRegistrar, srv AttackScriptsServiceServer) {
	s.RegisterService(&AttackScriptsService_ServiceDesc, srv)
}

func _AttackScriptsService_AddAttackScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddAttackScriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttackScriptsServiceServer).AddAttackScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sbot.proto.service.AttackScriptsService/AddAttackScripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttackScriptsServiceServer).AddAttackScripts(ctx, req.(*model.AddAttackScriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttackScriptsService_FetchAttackScripts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.FetchAttackScriptsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AttackScriptsServiceServer).FetchAttackScripts(m, &attackScriptsServiceFetchAttackScriptsServer{stream})
}

type AttackScriptsService_FetchAttackScriptsServer interface {
	Send(*model.AttackScripts) error
	grpc.ServerStream
}

type attackScriptsServiceFetchAttackScriptsServer struct {
	grpc.ServerStream
}

func (x *attackScriptsServiceFetchAttackScriptsServer) Send(m *model.AttackScripts) error {
	return x.ServerStream.SendMsg(m)
}

// AttackScriptsService_ServiceDesc is the grpc.ServiceDesc for AttackScriptsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttackScriptsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sbot.proto.service.AttackScriptsService",
	HandlerType: (*AttackScriptsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAttackScripts",
			Handler:    _AttackScriptsService_AddAttackScripts_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchAttackScripts",
			Handler:       _AttackScriptsService_FetchAttackScripts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/service/attack_scripts_service.proto",
}
