// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	model "github.com/sbot/proto/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CmdServiceClient is the client API for CmdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmdServiceClient interface {
	//Run a cmd
	RunCmd(ctx context.Context, in *model.CmdRequest, opts ...grpc.CallOption) (CmdService_RunCmdClient, error)
	// fetch a cmd from server bot
	FetchCmd(ctx context.Context, opts ...grpc.CallOption) (CmdService_FetchCmdClient, error)
}

type cmdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCmdServiceClient(cc grpc.ClientConnInterface) CmdServiceClient {
	return &cmdServiceClient{cc}
}

func (c *cmdServiceClient) RunCmd(ctx context.Context, in *model.CmdRequest, opts ...grpc.CallOption) (CmdService_RunCmdClient, error) {
	stream, err := c.cc.NewStream(ctx, &CmdService_ServiceDesc.Streams[0], "/sbot.proto.service.CmdService/RunCmd", opts...)
	if err != nil {
		return nil, err
	}
	x := &cmdServiceRunCmdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CmdService_RunCmdClient interface {
	Recv() (*model.CmdReply, error)
	grpc.ClientStream
}

type cmdServiceRunCmdClient struct {
	grpc.ClientStream
}

func (x *cmdServiceRunCmdClient) Recv() (*model.CmdReply, error) {
	m := new(model.CmdReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cmdServiceClient) FetchCmd(ctx context.Context, opts ...grpc.CallOption) (CmdService_FetchCmdClient, error) {
	stream, err := c.cc.NewStream(ctx, &CmdService_ServiceDesc.Streams[1], "/sbot.proto.service.CmdService/FetchCmd", opts...)
	if err != nil {
		return nil, err
	}
	x := &cmdServiceFetchCmdClient{stream}
	return x, nil
}

type CmdService_FetchCmdClient interface {
	Send(*model.CmdReply) error
	Recv() (*model.Cmd, error)
	grpc.ClientStream
}

type cmdServiceFetchCmdClient struct {
	grpc.ClientStream
}

func (x *cmdServiceFetchCmdClient) Send(m *model.CmdReply) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cmdServiceFetchCmdClient) Recv() (*model.Cmd, error) {
	m := new(model.Cmd)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CmdServiceServer is the server API for CmdService service.
// All implementations must embed UnimplementedCmdServiceServer
// for forward compatibility
type CmdServiceServer interface {
	//Run a cmd
	RunCmd(*model.CmdRequest, CmdService_RunCmdServer) error
	// fetch a cmd from server bot
	FetchCmd(CmdService_FetchCmdServer) error
	mustEmbedUnimplementedCmdServiceServer()
}

// UnimplementedCmdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCmdServiceServer struct {
}

func (UnimplementedCmdServiceServer) RunCmd(*model.CmdRequest, CmdService_RunCmdServer) error {
	return status.Errorf(codes.Unimplemented, "method RunCmd not implemented")
}
func (UnimplementedCmdServiceServer) FetchCmd(CmdService_FetchCmdServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchCmd not implemented")
}
func (UnimplementedCmdServiceServer) mustEmbedUnimplementedCmdServiceServer() {}

// UnsafeCmdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CmdServiceServer will
// result in compilation errors.
type UnsafeCmdServiceServer interface {
	mustEmbedUnimplementedCmdServiceServer()
}

func RegisterCmdServiceServer(s grpc.ServiceRegistrar, srv CmdServiceServer) {
	s.RegisterService(&CmdService_ServiceDesc, srv)
}

func _CmdService_RunCmd_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.CmdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CmdServiceServer).RunCmd(m, &cmdServiceRunCmdServer{stream})
}

type CmdService_RunCmdServer interface {
	Send(*model.CmdReply) error
	grpc.ServerStream
}

type cmdServiceRunCmdServer struct {
	grpc.ServerStream
}

func (x *cmdServiceRunCmdServer) Send(m *model.CmdReply) error {
	return x.ServerStream.SendMsg(m)
}

func _CmdService_FetchCmd_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CmdServiceServer).FetchCmd(&cmdServiceFetchCmdServer{stream})
}

type CmdService_FetchCmdServer interface {
	Send(*model.Cmd) error
	Recv() (*model.CmdReply, error)
	grpc.ServerStream
}

type cmdServiceFetchCmdServer struct {
	grpc.ServerStream
}

func (x *cmdServiceFetchCmdServer) Send(m *model.Cmd) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cmdServiceFetchCmdServer) Recv() (*model.CmdReply, error) {
	m := new(model.CmdReply)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CmdService_ServiceDesc is the grpc.ServiceDesc for CmdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CmdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sbot.proto.service.CmdService",
	HandlerType: (*CmdServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunCmd",
			Handler:       _CmdService_RunCmd_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchCmd",
			Handler:       _CmdService_FetchCmd_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/service/cmd_service.proto",
}
