// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	model "github.com/sbot/proto/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileSerivceClient is the client API for FileSerivce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSerivceClient interface {
	// download a file from server bot
	Download(ctx context.Context, in *model.DownloadRequest, opts ...grpc.CallOption) (FileSerivce_DownloadClient, error)
	//upload a file from cbot/other clients
	UPload(ctx context.Context, opts ...grpc.CallOption) (FileSerivce_UPloadClient, error)
}

type fileSerivceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSerivceClient(cc grpc.ClientConnInterface) FileSerivceClient {
	return &fileSerivceClient{cc}
}

func (c *fileSerivceClient) Download(ctx context.Context, in *model.DownloadRequest, opts ...grpc.CallOption) (FileSerivce_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileSerivce_ServiceDesc.Streams[0], "/sbot.proto.FileSerivce/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileSerivceDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileSerivce_DownloadClient interface {
	Recv() (*model.FilePart, error)
	grpc.ClientStream
}

type fileSerivceDownloadClient struct {
	grpc.ClientStream
}

func (x *fileSerivceDownloadClient) Recv() (*model.FilePart, error) {
	m := new(model.FilePart)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileSerivceClient) UPload(ctx context.Context, opts ...grpc.CallOption) (FileSerivce_UPloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileSerivce_ServiceDesc.Streams[1], "/sbot.proto.FileSerivce/UPload", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileSerivceUPloadClient{stream}
	return x, nil
}

type FileSerivce_UPloadClient interface {
	Send(*model.FilePart) error
	CloseAndRecv() (*model.UPloadStatus, error)
	grpc.ClientStream
}

type fileSerivceUPloadClient struct {
	grpc.ClientStream
}

func (x *fileSerivceUPloadClient) Send(m *model.FilePart) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileSerivceUPloadClient) CloseAndRecv() (*model.UPloadStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(model.UPloadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileSerivceServer is the server API for FileSerivce service.
// All implementations must embed UnimplementedFileSerivceServer
// for forward compatibility
type FileSerivceServer interface {
	// download a file from server bot
	Download(*model.DownloadRequest, FileSerivce_DownloadServer) error
	//upload a file from cbot/other clients
	UPload(FileSerivce_UPloadServer) error
	mustEmbedUnimplementedFileSerivceServer()
}

// UnimplementedFileSerivceServer must be embedded to have forward compatible implementations.
type UnimplementedFileSerivceServer struct {
}

func (UnimplementedFileSerivceServer) Download(*model.DownloadRequest, FileSerivce_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedFileSerivceServer) UPload(FileSerivce_UPloadServer) error {
	return status.Errorf(codes.Unimplemented, "method UPload not implemented")
}
func (UnimplementedFileSerivceServer) mustEmbedUnimplementedFileSerivceServer() {}

// UnsafeFileSerivceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSerivceServer will
// result in compilation errors.
type UnsafeFileSerivceServer interface {
	mustEmbedUnimplementedFileSerivceServer()
}

func RegisterFileSerivceServer(s grpc.ServiceRegistrar, srv FileSerivceServer) {
	s.RegisterService(&FileSerivce_ServiceDesc, srv)
}

func _FileSerivce_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileSerivceServer).Download(m, &fileSerivceDownloadServer{stream})
}

type FileSerivce_DownloadServer interface {
	Send(*model.FilePart) error
	grpc.ServerStream
}

type fileSerivceDownloadServer struct {
	grpc.ServerStream
}

func (x *fileSerivceDownloadServer) Send(m *model.FilePart) error {
	return x.ServerStream.SendMsg(m)
}

func _FileSerivce_UPload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSerivceServer).UPload(&fileSerivceUPloadServer{stream})
}

type FileSerivce_UPloadServer interface {
	SendAndClose(*model.UPloadStatus) error
	Recv() (*model.FilePart, error)
	grpc.ServerStream
}

type fileSerivceUPloadServer struct {
	grpc.ServerStream
}

func (x *fileSerivceUPloadServer) SendAndClose(m *model.UPloadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileSerivceUPloadServer) Recv() (*model.FilePart, error) {
	m := new(model.FilePart)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileSerivce_ServiceDesc is the grpc.ServiceDesc for FileSerivce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSerivce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sbot.proto.FileSerivce",
	HandlerType: (*FileSerivceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _FileSerivce_Download_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UPload",
			Handler:       _FileSerivce_UPload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/service/file_service.proto",
}
