// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	model "github.com/sbot/proto/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AttackTargetsServiceClient is the client API for AttackTargetsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttackTargetsServiceClient interface {
	AddAttackTargets(ctx context.Context, in *model.AddAttackTargetsRequest, opts ...grpc.CallOption) (*model.AddAttackTargetsReply, error)
	FetchAttackTargets(ctx context.Context, in *model.FetchAttackTargetsRequest, opts ...grpc.CallOption) (*model.AttackTargets, error)
}

type attackTargetsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttackTargetsServiceClient(cc grpc.ClientConnInterface) AttackTargetsServiceClient {
	return &attackTargetsServiceClient{cc}
}

func (c *attackTargetsServiceClient) AddAttackTargets(ctx context.Context, in *model.AddAttackTargetsRequest, opts ...grpc.CallOption) (*model.AddAttackTargetsReply, error) {
	out := new(model.AddAttackTargetsReply)
	err := c.cc.Invoke(ctx, "/sbot.proto.service.AttackTargetsService/AddAttackTargets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attackTargetsServiceClient) FetchAttackTargets(ctx context.Context, in *model.FetchAttackTargetsRequest, opts ...grpc.CallOption) (*model.AttackTargets, error) {
	out := new(model.AttackTargets)
	err := c.cc.Invoke(ctx, "/sbot.proto.service.AttackTargetsService/FetchAttackTargets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttackTargetsServiceServer is the server API for AttackTargetsService service.
// All implementations must embed UnimplementedAttackTargetsServiceServer
// for forward compatibility
type AttackTargetsServiceServer interface {
	AddAttackTargets(context.Context, *model.AddAttackTargetsRequest) (*model.AddAttackTargetsReply, error)
	FetchAttackTargets(context.Context, *model.FetchAttackTargetsRequest) (*model.AttackTargets, error)
	mustEmbedUnimplementedAttackTargetsServiceServer()
}

// UnimplementedAttackTargetsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAttackTargetsServiceServer struct {
}

func (UnimplementedAttackTargetsServiceServer) AddAttackTargets(context.Context, *model.AddAttackTargetsRequest) (*model.AddAttackTargetsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAttackTargets not implemented")
}
func (UnimplementedAttackTargetsServiceServer) FetchAttackTargets(context.Context, *model.FetchAttackTargetsRequest) (*model.AttackTargets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAttackTargets not implemented")
}
func (UnimplementedAttackTargetsServiceServer) mustEmbedUnimplementedAttackTargetsServiceServer() {}

// UnsafeAttackTargetsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttackTargetsServiceServer will
// result in compilation errors.
type UnsafeAttackTargetsServiceServer interface {
	mustEmbedUnimplementedAttackTargetsServiceServer()
}

func RegisterAttackTargetsServiceServer(s grpc.ServiceRegistrar, srv AttackTargetsServiceServer) {
	s.RegisterService(&AttackTargetsService_ServiceDesc, srv)
}

func _AttackTargetsService_AddAttackTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.AddAttackTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttackTargetsServiceServer).AddAttackTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sbot.proto.service.AttackTargetsService/AddAttackTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttackTargetsServiceServer).AddAttackTargets(ctx, req.(*model.AddAttackTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttackTargetsService_FetchAttackTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.FetchAttackTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttackTargetsServiceServer).FetchAttackTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sbot.proto.service.AttackTargetsService/FetchAttackTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttackTargetsServiceServer).FetchAttackTargets(ctx, req.(*model.FetchAttackTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttackTargetsService_ServiceDesc is the grpc.ServiceDesc for AttackTargetsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttackTargetsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sbot.proto.service.AttackTargetsService",
	HandlerType: (*AttackTargetsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAttackTargets",
			Handler:    _AttackTargetsService_AddAttackTargets_Handler,
		},
		{
			MethodName: "FetchAttackTargets",
			Handler:    _AttackTargetsService_FetchAttackTargets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/attack_targets_service.proto",
}
