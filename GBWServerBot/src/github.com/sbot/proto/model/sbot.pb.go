// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.3
// source: proto/model/sbot.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PageQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *PageQuery) Reset() {
	*x = PageQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_sbot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageQuery) ProtoMessage() {}

func (x *PageQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_sbot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageQuery.ProtoReflect.Descriptor instead.
func (*PageQuery) Descriptor() ([]byte, []int) {
	return file_proto_model_sbot_proto_rawDescGZIP(), []int{0}
}

func (x *PageQuery) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageQuery) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type TimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start uint64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   uint64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_sbot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_sbot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return file_proto_model_sbot_proto_rawDescGZIP(), []int{1}
}

func (x *TimeRange) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *TimeRange) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

type PageMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size      uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	TotalNum  uint64 `protobuf:"varint,3,opt,name=totalNum,proto3" json:"totalNum,omitempty"`
	TotalPage uint64 `protobuf:"varint,4,opt,name=totalPage,proto3" json:"totalPage,omitempty"`
}

func (x *PageMessage) Reset() {
	*x = PageMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_sbot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageMessage) ProtoMessage() {}

func (x *PageMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_sbot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageMessage.ProtoReflect.Descriptor instead.
func (*PageMessage) Descriptor() ([]byte, []int) {
	return file_proto_model_sbot_proto_rawDescGZIP(), []int{2}
}

func (x *PageMessage) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageMessage) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PageMessage) GetTotalNum() uint64 {
	if x != nil {
		return x.TotalNum
	}
	return 0
}

func (x *PageMessage) GetTotalPage() uint64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

//attack task query and reply
type AttackTaskQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string     `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	UserId string     `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Name   string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Time   *TimeRange `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	Page   *PageQuery `protobuf:"bytes,5,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *AttackTaskQuery) Reset() {
	*x = AttackTaskQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_sbot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttackTaskQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackTaskQuery) ProtoMessage() {}

func (x *AttackTaskQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_sbot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackTaskQuery.ProtoReflect.Descriptor instead.
func (*AttackTaskQuery) Descriptor() ([]byte, []int) {
	return file_proto_model_sbot_proto_rawDescGZIP(), []int{3}
}

func (x *AttackTaskQuery) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *AttackTaskQuery) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AttackTaskQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AttackTaskQuery) GetTime() *TimeRange {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AttackTaskQuery) GetPage() *PageQuery {
	if x != nil {
		return x.Page
	}
	return nil
}

type AttackTaskMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId     string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UserId     string `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Host       string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	Port       int32  `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	User       string `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	Passwd     string `protobuf:"bytes,7,opt,name=passwd,proto3" json:"passwd,omitempty"`
	PrivateKey string `protobuf:"bytes,8,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	Os         string `protobuf:"bytes,9,opt,name=os,proto3" json:"os,omitempty"`
	Cbot       string `protobuf:"bytes,10,opt,name=cbot,proto3" json:"cbot,omitempty"`
	CbotPath   string `protobuf:"bytes,11,opt,name=cbotPath,proto3" json:"cbotPath,omitempty"`
	Time       uint64 `protobuf:"varint,12,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AttackTaskMessage) Reset() {
	*x = AttackTaskMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_sbot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttackTaskMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackTaskMessage) ProtoMessage() {}

func (x *AttackTaskMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_sbot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackTaskMessage.ProtoReflect.Descriptor instead.
func (*AttackTaskMessage) Descriptor() ([]byte, []int) {
	return file_proto_model_sbot_proto_rawDescGZIP(), []int{4}
}

func (x *AttackTaskMessage) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *AttackTaskMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AttackTaskMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AttackTaskMessage) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *AttackTaskMessage) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AttackTaskMessage) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AttackTaskMessage) GetPasswd() string {
	if x != nil {
		return x.Passwd
	}
	return ""
}

func (x *AttackTaskMessage) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *AttackTaskMessage) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *AttackTaskMessage) GetCbot() string {
	if x != nil {
		return x.Cbot
	}
	return ""
}

func (x *AttackTaskMessage) GetCbotPath() string {
	if x != nil {
		return x.CbotPath
	}
	return ""
}

func (x *AttackTaskMessage) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type AttackTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*AttackTaskMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Page     *PageMessage         `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *AttackTaskReply) Reset() {
	*x = AttackTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_sbot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttackTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackTaskReply) ProtoMessage() {}

func (x *AttackTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_sbot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackTaskReply.ProtoReflect.Descriptor instead.
func (*AttackTaskReply) Descriptor() ([]byte, []int) {
	return file_proto_model_sbot_proto_rawDescGZIP(), []int{5}
}

func (x *AttackTaskReply) GetMessages() []*AttackTaskMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *AttackTaskReply) GetPage() *PageMessage {
	if x != nil {
		return x.Page
	}
	return nil
}

//attacked nodes query and reply
type AttackedNodeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId       string     `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	ParentNodeId string     `protobuf:"bytes,2,opt,name=parentNodeId,proto3" json:"parentNodeId,omitempty"`
	NodeId       string     `protobuf:"bytes,3,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Mac          string     `protobuf:"bytes,4,opt,name=mac,proto3" json:"mac,omitempty"`
	AttackType   string     `protobuf:"bytes,5,opt,name=attackType,proto3" json:"attackType,omitempty"`
	Page         *PageQuery `protobuf:"bytes,6,opt,name=page,proto3" json:"page,omitempty"`
	Time         *TimeRange `protobuf:"bytes,7,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AttackedNodeQuery) Reset() {
	*x = AttackedNodeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_sbot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttackedNodeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackedNodeQuery) ProtoMessage() {}

func (x *AttackedNodeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_sbot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackedNodeQuery.ProtoReflect.Descriptor instead.
func (*AttackedNodeQuery) Descriptor() ([]byte, []int) {
	return file_proto_model_sbot_proto_rawDescGZIP(), []int{6}
}

func (x *AttackedNodeQuery) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *AttackedNodeQuery) GetParentNodeId() string {
	if x != nil {
		return x.ParentNodeId
	}
	return ""
}

func (x *AttackedNodeQuery) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *AttackedNodeQuery) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *AttackedNodeQuery) GetAttackType() string {
	if x != nil {
		return x.AttackType
	}
	return ""
}

func (x *AttackedNodeQuery) GetPage() *PageQuery {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *AttackedNodeQuery) GetTime() *TimeRange {
	if x != nil {
		return x.Time
	}
	return nil
}

type AttackedNodeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId       string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	ParentNodeID string `protobuf:"bytes,2,opt,name=parentNodeID,proto3" json:"parentNodeID,omitempty"`
	NodeId       string `protobuf:"bytes,3,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	//the cbot version
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	//the local ip address that been attacked node
	LocalIP string `protobuf:"bytes,5,opt,name=localIP,proto3" json:"localIP,omitempty"`
	// the out ip address that been attacked node
	OutIP string `protobuf:"bytes,6,opt,name=outIP,proto3" json:"outIP,omitempty"`
	// the mac address that been attacked node
	Mac string `protobuf:"bytes,7,opt,name=mac,proto3" json:"mac,omitempty"`
	//the os that been attacked node
	Os string `protobuf:"bytes,8,opt,name=os,proto3" json:"os,omitempty"`
	//the system arch
	Arch string `protobuf:"bytes,9,opt,name=arch,proto3" json:"arch,omitempty"`
	//the current user
	User string `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
	//the host name that been attacked node
	HostName string `protobuf:"bytes,11,opt,name=hostName,proto3" json:"hostName,omitempty"`
	//the create node time
	Time uint64 `protobuf:"varint,12,opt,name=time,proto3" json:"time,omitempty"`
	//the last ping node time
	LastTime   uint64 `protobuf:"varint,13,opt,name=lastTime,proto3" json:"lastTime,omitempty"`
	AttackType string `protobuf:"bytes,14,opt,name=attackType,proto3" json:"attackType,omitempty"`
}

func (x *AttackedNodeMessage) Reset() {
	*x = AttackedNodeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_sbot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttackedNodeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackedNodeMessage) ProtoMessage() {}

func (x *AttackedNodeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_sbot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackedNodeMessage.ProtoReflect.Descriptor instead.
func (*AttackedNodeMessage) Descriptor() ([]byte, []int) {
	return file_proto_model_sbot_proto_rawDescGZIP(), []int{7}
}

func (x *AttackedNodeMessage) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *AttackedNodeMessage) GetParentNodeID() string {
	if x != nil {
		return x.ParentNodeID
	}
	return ""
}

func (x *AttackedNodeMessage) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *AttackedNodeMessage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AttackedNodeMessage) GetLocalIP() string {
	if x != nil {
		return x.LocalIP
	}
	return ""
}

func (x *AttackedNodeMessage) GetOutIP() string {
	if x != nil {
		return x.OutIP
	}
	return ""
}

func (x *AttackedNodeMessage) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *AttackedNodeMessage) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *AttackedNodeMessage) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *AttackedNodeMessage) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AttackedNodeMessage) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *AttackedNodeMessage) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AttackedNodeMessage) GetLastTime() uint64 {
	if x != nil {
		return x.LastTime
	}
	return 0
}

func (x *AttackedNodeMessage) GetAttackType() string {
	if x != nil {
		return x.AttackType
	}
	return ""
}

type AttackedNodeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  *PageMessage           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Nodes []*AttackedNodeMessage `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *AttackedNodeReply) Reset() {
	*x = AttackedNodeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_sbot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttackedNodeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackedNodeReply) ProtoMessage() {}

func (x *AttackedNodeReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_sbot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackedNodeReply.ProtoReflect.Descriptor instead.
func (*AttackedNodeReply) Descriptor() ([]byte, []int) {
	return file_proto_model_sbot_proto_rawDescGZIP(), []int{8}
}

func (x *AttackedNodeReply) GetPage() *PageMessage {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *AttackedNodeReply) GetNodes() []*AttackedNodeMessage {
	if x != nil {
		return x.Nodes
	}
	return nil
}

//attack process query and reply
type AttackProcessQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId     string     `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	NodeId     string     `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	AttackType string     `protobuf:"bytes,3,opt,name=attackType,proto3" json:"attackType,omitempty"`
	Page       *PageQuery `protobuf:"bytes,4,opt,name=page,proto3" json:"page,omitempty"`
	Time       *TimeRange `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AttackProcessQuery) Reset() {
	*x = AttackProcessQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_sbot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttackProcessQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackProcessQuery) ProtoMessage() {}

func (x *AttackProcessQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_sbot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackProcessQuery.ProtoReflect.Descriptor instead.
func (*AttackProcessQuery) Descriptor() ([]byte, []int) {
	return file_proto_model_sbot_proto_rawDescGZIP(), []int{9}
}

func (x *AttackProcessQuery) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *AttackProcessQuery) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *AttackProcessQuery) GetAttackType() string {
	if x != nil {
		return x.AttackType
	}
	return ""
}

func (x *AttackProcessQuery) GetPage() *PageQuery {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *AttackProcessQuery) GetTime() *TimeRange {
	if x != nil {
		return x.Time
	}
	return nil
}

type AttackProcessMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId     string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	NodeId     string `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Time       uint64 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	TargetIP   string `protobuf:"bytes,4,opt,name=targetIP,proto3" json:"targetIP,omitempty"`
	TargetHost string `protobuf:"bytes,5,opt,name=targetHost,proto3" json:"targetHost,omitempty"`
	TargetPort int32  `protobuf:"varint,6,opt,name=targetPort,proto3" json:"targetPort,omitempty"`
	Proto      string `protobuf:"bytes,7,opt,name=proto,proto3" json:"proto,omitempty"`
	App        string `protobuf:"bytes,8,opt,name=app,proto3" json:"app,omitempty"`
	Os         string `protobuf:"bytes,9,opt,name=os,proto3" json:"os,omitempty"`
	AttackName string `protobuf:"bytes,10,opt,name=attackName,proto3" json:"attackName,omitempty"`
	AttackType string `protobuf:"bytes,11,opt,name=attackType,proto3" json:"attackType,omitempty"`
	Status     int32  `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`
	Payload    string `protobuf:"bytes,13,opt,name=payload,proto3" json:"payload,omitempty"`
	Result     string `protobuf:"bytes,14,opt,name=result,proto3" json:"result,omitempty"`
	Details    string `protobuf:"bytes,15,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *AttackProcessMessage) Reset() {
	*x = AttackProcessMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_sbot_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttackProcessMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackProcessMessage) ProtoMessage() {}

func (x *AttackProcessMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_sbot_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackProcessMessage.ProtoReflect.Descriptor instead.
func (*AttackProcessMessage) Descriptor() ([]byte, []int) {
	return file_proto_model_sbot_proto_rawDescGZIP(), []int{10}
}

func (x *AttackProcessMessage) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *AttackProcessMessage) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *AttackProcessMessage) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AttackProcessMessage) GetTargetIP() string {
	if x != nil {
		return x.TargetIP
	}
	return ""
}

func (x *AttackProcessMessage) GetTargetHost() string {
	if x != nil {
		return x.TargetHost
	}
	return ""
}

func (x *AttackProcessMessage) GetTargetPort() int32 {
	if x != nil {
		return x.TargetPort
	}
	return 0
}

func (x *AttackProcessMessage) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

func (x *AttackProcessMessage) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *AttackProcessMessage) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *AttackProcessMessage) GetAttackName() string {
	if x != nil {
		return x.AttackName
	}
	return ""
}

func (x *AttackProcessMessage) GetAttackType() string {
	if x != nil {
		return x.AttackType
	}
	return ""
}

func (x *AttackProcessMessage) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AttackProcessMessage) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *AttackProcessMessage) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *AttackProcessMessage) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type AttackProcessMessageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page *PageMessage            `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Aps  []*AttackProcessMessage `protobuf:"bytes,2,rep,name=aps,proto3" json:"aps,omitempty"`
}

func (x *AttackProcessMessageReply) Reset() {
	*x = AttackProcessMessageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_sbot_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttackProcessMessageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackProcessMessageReply) ProtoMessage() {}

func (x *AttackProcessMessageReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_sbot_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackProcessMessageReply.ProtoReflect.Descriptor instead.
func (*AttackProcessMessageReply) Descriptor() ([]byte, []int) {
	return file_proto_model_sbot_proto_rawDescGZIP(), []int{11}
}

func (x *AttackProcessMessageReply) GetPage() *PageMessage {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *AttackProcessMessageReply) GetAps() []*AttackProcessMessage {
	if x != nil {
		return x.Aps
	}
	return nil
}

//download files query and reply
type AttackedNodeDownloadFileQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId     string     `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	NodeId     string     `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	AttackType string     `protobuf:"bytes,3,opt,name=attackType,proto3" json:"attackType,omitempty"`
	Page       *PageQuery `protobuf:"bytes,4,opt,name=page,proto3" json:"page,omitempty"`
	Time       *TimeRange `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AttackedNodeDownloadFileQuery) Reset() {
	*x = AttackedNodeDownloadFileQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_sbot_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttackedNodeDownloadFileQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackedNodeDownloadFileQuery) ProtoMessage() {}

func (x *AttackedNodeDownloadFileQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_sbot_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackedNodeDownloadFileQuery.ProtoReflect.Descriptor instead.
func (*AttackedNodeDownloadFileQuery) Descriptor() ([]byte, []int) {
	return file_proto_model_sbot_proto_rawDescGZIP(), []int{12}
}

func (x *AttackedNodeDownloadFileQuery) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *AttackedNodeDownloadFileQuery) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *AttackedNodeDownloadFileQuery) GetAttackType() string {
	if x != nil {
		return x.AttackType
	}
	return ""
}

func (x *AttackedNodeDownloadFileQuery) GetPage() *PageQuery {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *AttackedNodeDownloadFileQuery) GetTime() *TimeRange {
	if x != nil {
		return x.Time
	}
	return nil
}

type AttackedNodeDownloadFileMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId       string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	NodeId       string `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Url          string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Fname        string `protobuf:"bytes,4,opt,name=fname,proto3" json:"fname,omitempty"`
	AttackType   string `protobuf:"bytes,5,opt,name=attackType,proto3" json:"attackType,omitempty"`
	AttackIP     string `protobuf:"bytes,6,opt,name=attackIP,proto3" json:"attackIP,omitempty"`
	TargetIP     string `protobuf:"bytes,7,opt,name=targetIP,proto3" json:"targetIP,omitempty"`
	TargetPort   int32  `protobuf:"varint,8,opt,name=targetPort,proto3" json:"targetPort,omitempty"`
	TargetOutIP  string `protobuf:"bytes,9,opt,name=targetOutIP,proto3" json:"targetOutIP,omitempty"`
	DownloadTool string `protobuf:"bytes,10,opt,name=downloadTool,proto3" json:"downloadTool,omitempty"`
	UserAgent    string `protobuf:"bytes,11,opt,name=userAgent,proto3" json:"userAgent,omitempty"`
	Time         uint64 `protobuf:"varint,12,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AttackedNodeDownloadFileMessage) Reset() {
	*x = AttackedNodeDownloadFileMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_sbot_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttackedNodeDownloadFileMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackedNodeDownloadFileMessage) ProtoMessage() {}

func (x *AttackedNodeDownloadFileMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_sbot_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackedNodeDownloadFileMessage.ProtoReflect.Descriptor instead.
func (*AttackedNodeDownloadFileMessage) Descriptor() ([]byte, []int) {
	return file_proto_model_sbot_proto_rawDescGZIP(), []int{13}
}

func (x *AttackedNodeDownloadFileMessage) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *AttackedNodeDownloadFileMessage) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *AttackedNodeDownloadFileMessage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AttackedNodeDownloadFileMessage) GetFname() string {
	if x != nil {
		return x.Fname
	}
	return ""
}

func (x *AttackedNodeDownloadFileMessage) GetAttackType() string {
	if x != nil {
		return x.AttackType
	}
	return ""
}

func (x *AttackedNodeDownloadFileMessage) GetAttackIP() string {
	if x != nil {
		return x.AttackIP
	}
	return ""
}

func (x *AttackedNodeDownloadFileMessage) GetTargetIP() string {
	if x != nil {
		return x.TargetIP
	}
	return ""
}

func (x *AttackedNodeDownloadFileMessage) GetTargetPort() int32 {
	if x != nil {
		return x.TargetPort
	}
	return 0
}

func (x *AttackedNodeDownloadFileMessage) GetTargetOutIP() string {
	if x != nil {
		return x.TargetOutIP
	}
	return ""
}

func (x *AttackedNodeDownloadFileMessage) GetDownloadTool() string {
	if x != nil {
		return x.DownloadTool
	}
	return ""
}

func (x *AttackedNodeDownloadFileMessage) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *AttackedNodeDownloadFileMessage) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type AttackedNodeDownloadFileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page          *PageMessage                       `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	DownloadFiles []*AttackedNodeDownloadFileMessage `protobuf:"bytes,2,rep,name=downloadFiles,proto3" json:"downloadFiles,omitempty"`
}

func (x *AttackedNodeDownloadFileReply) Reset() {
	*x = AttackedNodeDownloadFileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_model_sbot_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttackedNodeDownloadFileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackedNodeDownloadFileReply) ProtoMessage() {}

func (x *AttackedNodeDownloadFileReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_model_sbot_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackedNodeDownloadFileReply.ProtoReflect.Descriptor instead.
func (*AttackedNodeDownloadFileReply) Descriptor() ([]byte, []int) {
	return file_proto_model_sbot_proto_rawDescGZIP(), []int{14}
}

func (x *AttackedNodeDownloadFileReply) GetPage() *PageMessage {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *AttackedNodeDownloadFileReply) GetDownloadFiles() []*AttackedNodeDownloadFileMessage {
	if x != nil {
		return x.DownloadFiles
	}
	return nil
}

var File_proto_model_sbot_proto protoreflect.FileDescriptor

var file_proto_model_sbot_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x62,
	0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x73, 0x62, 0x6f, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x33, 0x0a, 0x09, 0x50, 0x61,
	0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22,
	0x33, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x22, 0x6f, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x67, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x62,
	0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2f,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22,
	0x9f, 0x02, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x62, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x62, 0x6f,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x62, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x62, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x85, 0x01, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x62, 0x6f, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x11, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xe9, 0x02, 0x0a, 0x13, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x50, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x75, 0x74, 0x49, 0x50,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x75, 0x74, 0x49, 0x50, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x62, 0x6f, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x62,
	0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x12, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x92, 0x03, 0x0a, 0x14, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x61, 0x70, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x19, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x61, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x61,
	0x70, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x1d, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xe9, 0x02, 0x0a, 0x1f, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x50, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x50, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x49, 0x50, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x49, 0x50, 0x12, 0x22, 0x0a, 0x0c,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6f, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x1d, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x73, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x42, 0x69, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x62, 0x77, 0x33, 0x62, 0x61, 0x6f, 0x2e,
	0x73, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x42, 0x04, 0x53, 0x62, 0x6f, 0x74, 0x50, 0x01, 0x5a, 0x1b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x62, 0x6f, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0xaa, 0x02, 0x10, 0x53, 0x42, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0xca, 0x02, 0x10, 0x53, 0x42, 0x6f, 0x74, 0x5c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_model_sbot_proto_rawDescOnce sync.Once
	file_proto_model_sbot_proto_rawDescData = file_proto_model_sbot_proto_rawDesc
)

func file_proto_model_sbot_proto_rawDescGZIP() []byte {
	file_proto_model_sbot_proto_rawDescOnce.Do(func() {
		file_proto_model_sbot_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_model_sbot_proto_rawDescData)
	})
	return file_proto_model_sbot_proto_rawDescData
}

var file_proto_model_sbot_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_proto_model_sbot_proto_goTypes = []interface{}{
	(*PageQuery)(nil),                       // 0: sbot.proto.model.PageQuery
	(*TimeRange)(nil),                       // 1: sbot.proto.model.TimeRange
	(*PageMessage)(nil),                     // 2: sbot.proto.model.PageMessage
	(*AttackTaskQuery)(nil),                 // 3: sbot.proto.model.AttackTaskQuery
	(*AttackTaskMessage)(nil),               // 4: sbot.proto.model.AttackTaskMessage
	(*AttackTaskReply)(nil),                 // 5: sbot.proto.model.AttackTaskReply
	(*AttackedNodeQuery)(nil),               // 6: sbot.proto.model.AttackedNodeQuery
	(*AttackedNodeMessage)(nil),             // 7: sbot.proto.model.AttackedNodeMessage
	(*AttackedNodeReply)(nil),               // 8: sbot.proto.model.AttackedNodeReply
	(*AttackProcessQuery)(nil),              // 9: sbot.proto.model.AttackProcessQuery
	(*AttackProcessMessage)(nil),            // 10: sbot.proto.model.AttackProcessMessage
	(*AttackProcessMessageReply)(nil),       // 11: sbot.proto.model.AttackProcessMessageReply
	(*AttackedNodeDownloadFileQuery)(nil),   // 12: sbot.proto.model.AttackedNodeDownloadFileQuery
	(*AttackedNodeDownloadFileMessage)(nil), // 13: sbot.proto.model.AttackedNodeDownloadFileMessage
	(*AttackedNodeDownloadFileReply)(nil),   // 14: sbot.proto.model.AttackedNodeDownloadFileReply
}
var file_proto_model_sbot_proto_depIdxs = []int32{
	1,  // 0: sbot.proto.model.AttackTaskQuery.time:type_name -> sbot.proto.model.TimeRange
	0,  // 1: sbot.proto.model.AttackTaskQuery.page:type_name -> sbot.proto.model.PageQuery
	4,  // 2: sbot.proto.model.AttackTaskReply.messages:type_name -> sbot.proto.model.AttackTaskMessage
	2,  // 3: sbot.proto.model.AttackTaskReply.page:type_name -> sbot.proto.model.PageMessage
	0,  // 4: sbot.proto.model.AttackedNodeQuery.page:type_name -> sbot.proto.model.PageQuery
	1,  // 5: sbot.proto.model.AttackedNodeQuery.time:type_name -> sbot.proto.model.TimeRange
	2,  // 6: sbot.proto.model.AttackedNodeReply.page:type_name -> sbot.proto.model.PageMessage
	7,  // 7: sbot.proto.model.AttackedNodeReply.nodes:type_name -> sbot.proto.model.AttackedNodeMessage
	0,  // 8: sbot.proto.model.AttackProcessQuery.page:type_name -> sbot.proto.model.PageQuery
	1,  // 9: sbot.proto.model.AttackProcessQuery.time:type_name -> sbot.proto.model.TimeRange
	2,  // 10: sbot.proto.model.AttackProcessMessageReply.page:type_name -> sbot.proto.model.PageMessage
	10, // 11: sbot.proto.model.AttackProcessMessageReply.aps:type_name -> sbot.proto.model.AttackProcessMessage
	0,  // 12: sbot.proto.model.AttackedNodeDownloadFileQuery.page:type_name -> sbot.proto.model.PageQuery
	1,  // 13: sbot.proto.model.AttackedNodeDownloadFileQuery.time:type_name -> sbot.proto.model.TimeRange
	2,  // 14: sbot.proto.model.AttackedNodeDownloadFileReply.page:type_name -> sbot.proto.model.PageMessage
	13, // 15: sbot.proto.model.AttackedNodeDownloadFileReply.downloadFiles:type_name -> sbot.proto.model.AttackedNodeDownloadFileMessage
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_proto_model_sbot_proto_init() }
func file_proto_model_sbot_proto_init() {
	if File_proto_model_sbot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_model_sbot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_sbot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_sbot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_sbot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttackTaskQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_sbot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttackTaskMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_sbot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttackTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_sbot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttackedNodeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_sbot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttackedNodeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_sbot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttackedNodeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_sbot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttackProcessQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_sbot_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttackProcessMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_sbot_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttackProcessMessageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_sbot_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttackedNodeDownloadFileQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_sbot_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttackedNodeDownloadFileMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_model_sbot_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttackedNodeDownloadFileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_model_sbot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_model_sbot_proto_goTypes,
		DependencyIndexes: file_proto_model_sbot_proto_depIdxs,
		MessageInfos:      file_proto_model_sbot_proto_msgTypes,
	}.Build()
	File_proto_model_sbot_proto = out.File
	file_proto_model_sbot_proto_rawDesc = nil
	file_proto_model_sbot_proto_goTypes = nil
	file_proto_model_sbot_proto_depIdxs = nil
}
